/**
 * Class AppError - L·ªõp l·ªói t√πy ch·ªânh cho ·ª©ng d·ª•ng
 * @extends Error
 */
class AppError extends Error {
  /**
   * T·∫°o m·ªôt instance c·ªßa AppError
   * @param {string} message - Th√¥ng b√°o l·ªói
   * @param {number} statusCode - M√£ tr·∫°ng th√°i HTTP
   * @param {boolean} isOperational - C√≥ ph·∫£i l√† l·ªói ho·∫°t ƒë·ªông kh√¥ng (true) hay l·ªói l·∫≠p tr√¨nh (false)
   */
  constructor(message, statusCode, isOperational = true) {
    super(message);
    this.statusCode = statusCode;
    this.isOperational = isOperational;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    
    Error.captureStackTrace(this, this.constructor);
  }
}

/**
 * H√†m b·ªçc async ƒë·ªÉ b·∫Øt l·ªói v√† chuy·ªÉn ƒë·∫øn middleware x·ª≠ l√Ω l·ªói
 * @param {Function} fn - H√†m async c·∫ßn b·ªçc
 * @returns {Function} - H√†m ƒë√£ ƒë∆∞·ª£c b·ªçc
 */
const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

/**
 * X·ª≠ l√Ω l·ªói t·ª´ MongoDB
 * @param {Error} err - L·ªói t·ª´ MongoDB
 * @returns {AppError} - L·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
 */
const handleMongoDBError = (err) => {
  if (err.name === 'CastError') {
    return new AppError(`Invalid ${err.path}: ${err.value}`, 400);
  }
  
  if (err.code === 11000) {
    const field = Object.keys(err.keyValue)[0];
    return new AppError(`Duplicate field value: ${field}. Please use another value.`, 400);
  }
  
  if (err.name === 'ValidationError') {
    const errors = Object.values(err.errors).map(val => val.message);
    return new AppError(`Invalid input data: ${errors.join('. ')}`, 400);
  }
  
  return new AppError('Database error', 500);
};

/**
 * X·ª≠ l√Ω l·ªói JWT
 * @param {Error} err - L·ªói t·ª´ JWT
 * @returns {AppError} - L·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
 */
const handleJWTError = (err) => {
  if (err.name === 'JsonWebTokenError') {
    return new AppError('Invalid token. Please log in again.', 401);
  }
  
  if (err.name === 'TokenExpiredError') {
    return new AppError('Your token has expired. Please log in again.', 401);
  }
  
  return new AppError('Authentication error', 401);
};

/**
 * Middleware x·ª≠ l√Ω l·ªói t·∫≠p trung
 * @param {Error} err - L·ªói c·∫ßn x·ª≠ l√Ω
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const errorHandler = (err, req, res, next) => {
  // Log l·ªói
  console.error(`[${new Date().toISOString()}] [ERROR] ${err.stack}`);
  
  // M·∫∑c ƒë·ªãnh
  let error = { ...err };
  error.message = err.message;
  error.statusCode = err.statusCode || 500;
  error.status = err.status || 'error';
  
  // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
  if (err.name === 'CastError' || err.name === 'ValidationError' || err.code === 11000) {
    error = handleMongoDBError(err);
  }
  
  if (err.name === 'JsonWebTokenError' || err.name === 'TokenExpiredError') {
    error = handleJWTError(err);
  }
  
  // Ph·∫£n h·ªìi l·ªói
  if (process.env.NODE_ENV === 'development') {
    // Trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt
    return res.status(error.statusCode).json({
      success: false,
      status: error.status,
      message: error.message,
      stack: error.stack,
      error: error
    });
  } else {
    // Trong m√¥i tr∆∞·ªùng production, ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt
    if (error.isOperational) {
      return res.status(error.statusCode).json({
        success: false,
        status: error.status,
        message: error.message
      });
    } else {
      // L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh kh√°c
      console.error('ERROR üí•', error);
      return res.status(500).json({
        success: false,
        status: 'error',
        message: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.'
      });
    }
  }
};

module.exports = {
  AppError,
  catchAsync,
  errorHandler
};