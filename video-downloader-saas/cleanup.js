/**
 * Script ƒë·ªÉ lo·∫°i b·ªè c√°c t·ªáp tin v√† th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt
 * Ch·∫°y: node cleanup.js
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const unlink = promisify(fs.unlink);
const rmdir = promisify(fs.rmdir);
const exists = promisify(fs.exists);

// Danh s√°ch c√°c t·ªáp tin c·∫ßn lo·∫°i b·ªè
const filesToRemove = [
  // T·ªáp tin li√™n quan ƒë·∫øn Coolify
  'video-downloader-saas/nginx/coolify-nginx.conf',
  'video-downloader-saas/backend/README-COOLIFY-503-FIX.md',
  'video-downloader-saas/backend/README-COOLIFY-503-FIX-UPDATED.md',
  'video-downloader-saas/backend/README-COOLIFY-404-FIX.md',
  'video-downloader-saas/backend/README-COOLIFY-NIXPACKS-CONFIG.md',
  'video-downloader-saas/backend/README-COOLIFY-TRAEFIK-CONFIG.md',
  'video-downloader-saas/backend/README-COOLIFY-DNS-PORT-CONFIG.md',
  'video-downloader-saas/backend/README-COOLIFY-DOCKER-COMPOSE.md',
  'video-downloader-saas/backend/.env.coolify',
  'video-downloader-saas/COOLIFY-GUIDE.md',
  'video-downloader-saas/README-COOLIFY.md',
  
  // T·ªáp tin c·∫•u h√¨nh kh√¥ng c·∫ßn thi·∫øt
  'video-downloader-saas/backend/docker-compose.yaml',
  'video-downloader-saas/backend/coolify.json',
  'video-downloader-saas/coolify.json',
  'video-downloader-saas/docker-compose.yml',
  
  // T·ªáp tin li√™n quan ƒë·∫øn VPS
  'video-downloader-saas/README-VPS.md',
  'video-downloader-saas/VPS-GUIDE.md',
  'video-downloader-saas/SQLITE-VPS-GUIDE.md',
  'video-downloader-saas/setup-vps.sh',
  'video-downloader-saas/setup-vps.sh.newX',
  'video-downloader-saas/setup-vps.sh.new',
  'video-downloader-saas/prepare-for-coolify.sh',
  'video-downloader-saas/apply-changes.sh',
  'video-downloader-saas/install-dependencies.sh',
  'video-downloader-saas/check-linux-compatibility.js',
  
  // T·ªáp tin backend kh√¥ng c·∫ßn thi·∫øt
  'video-downloader-saas/backend/server.js.new',
  'video-downloader-saas/backend/README-SEQUELIZE-FIX.md',
  'video-downloader-saas/backend/README-SEQUELIZE-NAMING-FIX.md',
  
  // T·ªáp tin frontend kh√¥ng c·∫ßn thi·∫øt
  'video-downloader-saas/frontend/.env.coolify',
  'video-downloader-saas/frontend/fix-nginx.sh',
  
  // T·ªáp tin t·∫°m th·ªùi
  'video-downloader-saas/cleanup-list.md'
];

// Danh s√°ch c√°c th∆∞ m·ª•c c·∫ßn lo·∫°i b·ªè
const dirsToRemove = [
  // Th∆∞ m·ª•c node_modules (s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t l·∫°i trong qu√° tr√¨nh build)
  'video-downloader-saas/backend/node_modules',
  'video-downloader-saas/frontend/node_modules',
  
  // Th∆∞ m·ª•c tr√πng l·∫∑p
  'video-downloader-saas/backend/video-downloader-saas'
];

// Danh s√°ch c√°c m·∫´u t·ªáp tin c·∫ßn t√¨m v√† lo·∫°i b·ªè
const filePatterns = [
  '.DS_Store',
  '*.log'
];

/**
 * X√≥a m·ªôt t·ªáp tin n·∫øu t·ªìn t·∫°i
 */
async function removeFile(filePath) {
  try {
    if (await exists(filePath)) {
      await unlink(filePath);
      console.log(`‚úÖ ƒê√£ x√≥a t·ªáp tin: ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è T·ªáp tin kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a t·ªáp tin ${filePath}:`, error);
  }
}

/**
 * X√≥a m·ªôt th∆∞ m·ª•c v√† t·∫•t c·∫£ n·ªôi dung b√™n trong
 */
async function removeDirectory(dirPath) {
  try {
    if (!(await exists(dirPath))) {
      console.log(`‚ö†Ô∏è Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: ${dirPath}`);
      return;
    }
    
    const items = await readdir(dirPath);
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      const itemStat = await stat(itemPath);
      
      if (itemStat.isDirectory()) {
        await removeDirectory(itemPath);
      } else {
        await unlink(itemPath);
      }
    }
    
    await rmdir(dirPath);
    console.log(`‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c: ${dirPath}`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a th∆∞ m·ª•c ${dirPath}:`, error);
  }
}

/**
 * T√¨m v√† x√≥a c√°c t·ªáp tin theo m·∫´u
 */
async function findAndRemoveFiles(directory, pattern) {
  try {
    if (!(await exists(directory))) {
      return;
    }
    
    const items = await readdir(directory);
    
    for (const item of items) {
      const itemPath = path.join(directory, item);
      const itemStat = await stat(itemPath);
      
      if (itemStat.isDirectory()) {
        await findAndRemoveFiles(itemPath, pattern);
      } else if (item.match(pattern.replace('*', '.*'))) {
        await unlink(itemPath);
        console.log(`‚úÖ ƒê√£ x√≥a t·ªáp tin: ${itemPath}`);
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi t√¨m v√† x√≥a t·ªáp tin theo m·∫´u ${pattern}:`, error);
  }
}

/**
 * H√†m ch√≠nh
 */
async function main() {
  console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp c√°c t·ªáp tin v√† th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt...');
  
  // X√≥a c√°c t·ªáp tin c·ª• th·ªÉ
  for (const file of filesToRemove) {
    await removeFile(file);
  }
  
  // X√≥a c√°c th∆∞ m·ª•c c·ª• th·ªÉ
  for (const dir of dirsToRemove) {
    await removeDirectory(dir);
  }
  
  // T√¨m v√† x√≥a c√°c t·ªáp tin theo m·∫´u
  const rootDir = 'video-downloader-saas';
  for (const pattern of filePatterns) {
    console.log(`üîç T√¨m v√† x√≥a c√°c t·ªáp tin theo m·∫´u: ${pattern}`);
    await findAndRemoveFiles(rootDir, pattern);
  }
  
  console.log('‚ú® Ho√†n t·∫•t d·ªçn d·∫πp!');
}

// Ch·∫°y h√†m ch√≠nh
main().catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
});