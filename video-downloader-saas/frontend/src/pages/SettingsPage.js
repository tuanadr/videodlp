import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
import useAppStore from '../store/useAppStore';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import settingsService from '../services/settingsService';

const SettingsPage = () => {
  const { user } = useAuth();
  const { addNotification } = useAppStore();
  
  // Settings state
  const [settings, setSettings] = useState({
    // User Preferences
    language: 'vi',
    theme: 'light',
    timezone: 'Asia/Ho_Chi_Minh',
    
    // Notifications
    emailNotifications: true,
    downloadNotifications: true,
    promotionalEmails: false,
    securityAlerts: true,
    
    // Download Settings
    defaultQuality: 'best',
    downloadLocation: 'downloads',
    autoDownload: false,
    maxConcurrentDownloads: 3,
    
    // Privacy Settings
    profileVisibility: 'private',
    downloadHistory: true,
    analytics: true,
    
    // Account Settings
    twoFactorAuth: false,
    sessionTimeout: 30,
    autoLogout: false
  });
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('general');
  const [errors, setErrors] = useState({});
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const loadUserSettings = useCallback(async () => {
    try {
      setLoading(true);
      setErrors({});

      // Try to fetch user settings from API
      try {
        const response = await settingsService.getUserSettings();
        if (response.success && response.data) {
          setSettings(prev => ({ ...prev, ...response.data }));
        }
      } catch (apiError) {
        // If API fails, use default settings (for development)
        console.warn('API not available, using default settings:', apiError.message);
        const defaultSettings = settingsService.getDefaultSettings();
        setSettings(prev => ({ ...prev, ...defaultSettings }));
      }

      setHasUnsavedChanges(false);
    } catch (error) {
      console.error('Error loading settings:', error);
      addNotification('Kh√¥ng th·ªÉ t·∫£i c√†i ƒë·∫∑t', 'error');

      // Fallback to default settings
      const defaultSettings = settingsService.getDefaultSettings();
      setSettings(prev => ({ ...prev, ...defaultSettings }));
    } finally {
      setLoading(false);
    }
  }, [addNotification]);

  // Load user settings on component mount
  useEffect(() => {
    loadUserSettings();
  }, [loadUserSettings]);

  const handleSettingChange = useCallback((category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
    setHasUnsavedChanges(true);

    // Clear any existing errors for this field
    if (errors[key]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[key];
        return newErrors;
      });
    }
  }, [errors]);

  const saveSettings = useCallback(async () => {
    try {
      setSaving(true);
      setErrors({});

      // Validate settings before saving
      const validation = settingsService.validateSettings(settings);
      if (!validation.isValid) {
        setErrors(validation.errors);
        addNotification('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p', 'error');
        return;
      }

      // Try to save to API
      try {
        const response = await settingsService.updateUserSettings(settings);
        if (response.success) {
          addNotification('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng', 'success');
          setHasUnsavedChanges(false);
        } else {
          throw new Error(response.message || 'Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t');
        }
      } catch (apiError) {
        // If API fails, simulate success for development
        console.warn('API not available, simulating save:', apiError.message);
        await new Promise(resolve => setTimeout(resolve, 1000));
        addNotification('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng (ch·∫ø ƒë·ªô ph√°t tri·ªÉn)', 'success');
        setHasUnsavedChanges(false);
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      addNotification('Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t', 'error');
    } finally {
      setSaving(false);
    }
  }, [settings, addNotification]);

  const resetToDefaults = useCallback(async () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
      try {
        // Try to reset via API first
        try {
          const response = await settingsService.resetToDefaults();
          if (response.success && response.data) {
            setSettings(response.data);
            addNotification('ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh', 'info');
            setHasUnsavedChanges(false);
            return;
          }
        } catch (apiError) {
          console.warn('API reset not available, using local reset:', apiError.message);
        }

        // Fallback to local reset
        const defaultSettings = settingsService.getDefaultSettings();
        setSettings(defaultSettings);
        setHasUnsavedChanges(true);
        addNotification('ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh', 'info');
      } catch (error) {
        console.error('Error resetting settings:', error);
        addNotification('Kh√¥ng th·ªÉ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh', 'error');
      }
    }
  }, [addNotification]);

  // Warn user about unsaved changes when leaving page
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = 'B·∫°n c√≥ thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi trang?';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [hasUnsavedChanges]);

  const tabs = [
    { id: 'general', name: 'Chung', icon: '‚öôÔ∏è', description: 'Ng√¥n ng·ªØ, giao di·ªán v√† m√∫i gi·ªù' },
    { id: 'notifications', name: 'Th√¥ng b√°o', icon: 'üîî', description: 'Email v√† th√¥ng b√°o ·ª©ng d·ª•ng' },
    { id: 'downloads', name: 'T·∫£i xu·ªëng', icon: 'üì•', description: 'Ch·∫•t l∆∞·ª£ng v√† t√πy ch·ªçn t·∫£i' },
    { id: 'privacy', name: 'Ri√™ng t∆∞', icon: 'üîí', description: 'Quy·ªÅn ri√™ng t∆∞ v√† d·ªØ li·ªáu' },
    { id: 'security', name: 'B·∫£o m·∫≠t', icon: 'üõ°Ô∏è', description: 'M·∫≠t kh·∫©u v√† x√°c th·ª±c' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <div className="px-4 py-6 sm:px-0">
        {/* Header */}
        <header className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">C√†i ƒë·∫∑t</h1>
              <p className="mt-2 text-gray-600">
                Qu·∫£n l√Ω t√πy ch·ªçn v√† c√†i ƒë·∫∑t t√†i kho·∫£n c·ªßa b·∫°n
              </p>
            </div>
            {hasUnsavedChanges && (
              <div className="flex items-center text-amber-600 bg-amber-50 px-3 py-2 rounded-lg border border-amber-200">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <span className="text-sm font-medium">C√≥ thay ƒë·ªïi ch∆∞a l∆∞u</span>
              </div>
            )}
          </div>
        </header>

        <div className="lg:grid lg:grid-cols-12 lg:gap-x-8">
          {/* Sidebar Navigation */}
          <aside className="py-6 px-2 sm:px-6 lg:py-0 lg:px-0 lg:col-span-3">
            <nav className="space-y-1">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`group rounded-md px-3 py-3 flex flex-col items-start text-sm font-medium w-full text-left transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                      : 'text-gray-900 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                  aria-current={activeTab === tab.id ? 'page' : undefined}
                >
                  <div className="flex items-center">
                    <span className="mr-3 text-lg">{tab.icon}</span>
                    <span className="font-medium">{tab.name}</span>
                  </div>
                  <span className="text-xs text-gray-500 mt-1 ml-8">{tab.description}</span>
                </button>
              ))}
            </nav>
          </aside>

          {/* Main Content */}
          <div className="space-y-6 sm:px-6 lg:px-0 lg:col-span-9">
            <div className="bg-white shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                {/* General Settings */}
                {activeTab === 'general' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t chung</h3>
                      
                      {/* Language */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ng√¥n ng·ªØ
                        </label>
                        <select
                          value={settings.language}
                          onChange={(e) => handleSettingChange('general', 'language', e.target.value)}
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${
                            errors.language ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''
                          }`}
                        >
                          <option value="vi">Ti·∫øng Vi·ªát</option>
                          <option value="en">English</option>
                        </select>
                        {errors.language && (
                          <p className="mt-1 text-sm text-red-600">{errors.language}</p>
                        )}
                      </div>

                      {/* Theme */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Giao di·ªán
                        </label>
                        <div className="mt-2 space-y-2">
                          {[
                            { value: 'light', label: '‚òÄÔ∏è S√°ng' },
                            { value: 'dark', label: 'üåô T·ªëi' },
                            { value: 'auto', label: 'üîÑ T·ª± ƒë·ªông' }
                          ].map((option) => (
                            <label key={option.value} className="flex items-center">
                              <input
                                type="radio"
                                name="theme"
                                value={option.value}
                                checked={settings.theme === option.value}
                                onChange={(e) => handleSettingChange('general', 'theme', e.target.value)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
                              />
                              <span className="ml-3 text-sm text-gray-700">{option.label}</span>
                            </label>
                          ))}
                        </div>
                      </div>

                      {/* Timezone */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          M√∫i gi·ªù
                        </label>
                        <select
                          value={settings.timezone}
                          onChange={(e) => handleSettingChange('general', 'timezone', e.target.value)}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value="Asia/Ho_Chi_Minh">Vi·ªát Nam (UTC+7)</option>
                          <option value="UTC">UTC (UTC+0)</option>
                          <option value="America/New_York">New York (UTC-5)</option>
                        </select>
                      </div>
                    </div>
                  </div>
                )}

                {/* Notification Settings */}
                {activeTab === 'notifications' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t th√¥ng b√°o</h3>
                      
                      <div className="space-y-4">
                        {[
                          { key: 'emailNotifications', label: 'Th√¥ng b√°o qua email', desc: 'Nh·∫≠n th√¥ng b√°o quan tr·ªçng qua email' },
                          { key: 'downloadNotifications', label: 'Th√¥ng b√°o t·∫£i xu·ªëng', desc: 'Th√¥ng b√°o khi t·∫£i xu·ªëng ho√†n t·∫•t' },
                          { key: 'promotionalEmails', label: 'Email khuy·∫øn m√£i', desc: 'Nh·∫≠n th√¥ng tin v·ªÅ ∆∞u ƒë√£i v√† t√≠nh nƒÉng m·ªõi' },
                          { key: 'securityAlerts', label: 'C·∫£nh b√°o b·∫£o m·∫≠t', desc: 'Th√¥ng b√°o v·ªÅ ho·∫°t ƒë·ªông ƒëƒÉng nh·∫≠p v√† b·∫£o m·∫≠t' }
                        ].map((item) => (
                          <div key={item.key} className="flex items-start">
                            <div className="flex items-center h-5">
                              <input
                                type="checkbox"
                                checked={settings[item.key]}
                                onChange={(e) => handleSettingChange('notifications', item.key, e.target.checked)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                              />
                            </div>
                            <div className="ml-3 text-sm">
                              <label className="font-medium text-gray-700">{item.label}</label>
                              <p className="text-gray-500">{item.desc}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Download Settings */}
                {activeTab === 'downloads' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t t·∫£i xu·ªëng</h3>
                      
                      {/* Default Quality */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ch·∫•t l∆∞·ª£ng m·∫∑c ƒë·ªãnh
                        </label>
                        <select
                          value={settings.defaultQuality}
                          onChange={(e) => handleSettingChange('downloads', 'defaultQuality', e.target.value)}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value="best">T·ªët nh·∫•t c√≥ s·∫µn</option>
                          <option value="1080p">1080p (Full HD)</option>
                          <option value="720p">720p (HD)</option>
                          <option value="480p">480p (SD)</option>
                        </select>
                      </div>

                      {/* Max Concurrent Downloads */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          S·ªë l∆∞·ª£ng t·∫£i ƒë·ªìng th·ªùi t·ªëi ƒëa
                        </label>
                        <input
                          type="number"
                          min="1"
                          max="10"
                          value={settings.maxConcurrentDownloads}
                          onChange={(e) => handleSettingChange('downloads', 'maxConcurrentDownloads', parseInt(e.target.value))}
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                      </div>

                      {/* Auto Download */}
                      <div className="flex items-start">
                        <div className="flex items-center h-5">
                          <input
                            type="checkbox"
                            checked={settings.autoDownload}
                            onChange={(e) => handleSettingChange('downloads', 'autoDownload', e.target.checked)}
                            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                          />
                        </div>
                        <div className="ml-3 text-sm">
                          <label className="font-medium text-gray-700">T·ª± ƒë·ªông t·∫£i xu·ªëng</label>
                          <p className="text-gray-500">T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu t·∫£i sau khi ph√¢n t√≠ch video</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Privacy Settings */}
                {activeTab === 'privacy' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t ri√™ng t∆∞</h3>
                      
                      <div className="space-y-4">
                        {[
                          { key: 'downloadHistory', label: 'L∆∞u l·ªãch s·ª≠ t·∫£i xu·ªëng', desc: 'L∆∞u tr·ªØ l·ªãch s·ª≠ c√°c video ƒë√£ t·∫£i' },
                          { key: 'analytics', label: 'Chia s·∫ª d·ªØ li·ªáu ph√¢n t√≠ch', desc: 'Gi√∫p c·∫£i thi·ªán d·ªãch v·ª• b·∫±ng c√°ch chia s·∫ª d·ªØ li·ªáu s·ª≠ d·ª•ng ·∫©n danh' }
                        ].map((item) => (
                          <div key={item.key} className="flex items-start">
                            <div className="flex items-center h-5">
                              <input
                                type="checkbox"
                                checked={settings[item.key]}
                                onChange={(e) => handleSettingChange('privacy', item.key, e.target.checked)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                              />
                            </div>
                            <div className="ml-3 text-sm">
                              <label className="font-medium text-gray-700">{item.label}</label>
                              <p className="text-gray-500">{item.desc}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Security Settings */}
                {activeTab === 'security' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t b·∫£o m·∫≠t</h3>
                      
                      {/* Two Factor Auth */}
                      <div className="mb-6">
                        <div className="flex items-start">
                          <div className="flex items-center h-5">
                            <input
                              type="checkbox"
                              checked={settings.twoFactorAuth}
                              onChange={(e) => handleSettingChange('security', 'twoFactorAuth', e.target.checked)}
                              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                            />
                          </div>
                          <div className="ml-3 text-sm">
                            <label className="font-medium text-gray-700">X√°c th·ª±c hai y·∫øu t·ªë</label>
                            <p className="text-gray-500">Th√™m l·ªõp b·∫£o m·∫≠t b·ªï sung cho t√†i kho·∫£n c·ªßa b·∫°n</p>
                          </div>
                        </div>
                      </div>

                      {/* Session Timeout */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Th·ªùi gian h·∫øt h·∫°n phi√™n (ph√∫t)
                        </label>
                        <select
                          value={settings.sessionTimeout}
                          onChange={(e) => handleSettingChange('security', 'sessionTimeout', parseInt(e.target.value))}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value={15}>15 ph√∫t</option>
                          <option value={30}>30 ph√∫t</option>
                          <option value={60}>1 gi·ªù</option>
                          <option value={120}>2 gi·ªù</option>
                          <option value={0}>Kh√¥ng gi·ªõi h·∫°n</option>
                        </select>
                      </div>

                      {/* Auto Logout */}
                      <div className="flex items-start">
                        <div className="flex items-center h-5">
                          <input
                            type="checkbox"
                            checked={settings.autoLogout}
                            onChange={(e) => handleSettingChange('security', 'autoLogout', e.target.checked)}
                            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                          />
                        </div>
                        <div className="ml-3 text-sm">
                          <label className="font-medium text-gray-700">T·ª± ƒë·ªông ƒëƒÉng xu·∫•t</label>
                          <p className="text-gray-500">T·ª± ƒë·ªông ƒëƒÉng xu·∫•t khi kh√¥ng ho·∫°t ƒë·ªông</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="pt-6 border-t border-gray-200">
                  <div className="flex flex-col sm:flex-row sm:justify-between gap-4">
                    <div className="flex gap-3">
                      <button
                        onClick={resetToDefaults}
                        disabled={saving}
                        className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                      >
                        Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
                      </button>

                      {hasUnsavedChanges && (
                        <button
                          onClick={loadUserSettings}
                          disabled={saving}
                          className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                          H·ªßy thay ƒë·ªïi
                        </button>
                      )}
                    </div>

                    <button
                      onClick={saveSettings}
                      disabled={saving || !hasUnsavedChanges}
                      className={`px-6 py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center ${
                        hasUnsavedChanges && !saving
                          ? 'bg-blue-600 text-white hover:bg-blue-700'
                          : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      } disabled:opacity-50 disabled:cursor-not-allowed`}
                    >
                      {saving && <LoadingSpinner size="sm" className="mr-2" />}
                      {saving ? 'ƒêang l∆∞u...' : hasUnsavedChanges ? 'L∆∞u c√†i ƒë·∫∑t' : 'ƒê√£ l∆∞u'}
                    </button>
                  </div>

                  {hasUnsavedChanges && (
                    <div className="mt-3 text-sm text-amber-600 flex items-center">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                      </svg>
                      B·∫°n c√≥ thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
};

export default SettingsPage;
