import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import useAppStore from '../store/useAppStore';
import LoadingSpinner from '../components/ui/LoadingSpinner';

const SettingsPage = () => {
  const { user } = useAuth();
  const { addNotification } = useAppStore();
  
  // Settings state
  const [settings, setSettings] = useState({
    // User Preferences
    language: 'vi',
    theme: 'light',
    timezone: 'Asia/Ho_Chi_Minh',
    
    // Notifications
    emailNotifications: true,
    downloadNotifications: true,
    promotionalEmails: false,
    securityAlerts: true,
    
    // Download Settings
    defaultQuality: 'best',
    downloadLocation: 'downloads',
    autoDownload: false,
    maxConcurrentDownloads: 3,
    
    // Privacy Settings
    profileVisibility: 'private',
    downloadHistory: true,
    analytics: true,
    
    // Account Settings
    twoFactorAuth: false,
    sessionTimeout: 30,
    autoLogout: false
  });
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('general');

  // Load user settings on component mount
  useEffect(() => {
    loadUserSettings();
  }, []);

  const loadUserSettings = async () => {
    try {
      setLoading(true);
      // TODO: Fetch user settings from API
      // const response = await fetch('/api/users/settings');
      // const userSettings = await response.json();
      // setSettings(prev => ({ ...prev, ...userSettings }));
      
      // Simulate API call
      setTimeout(() => {
        setLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Error loading settings:', error);
      addNotification('Kh√¥ng th·ªÉ t·∫£i c√†i ƒë·∫∑t', 'error');
      setLoading(false);
    }
  };

  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const saveSettings = async () => {
    try {
      setSaving(true);
      
      // TODO: Save settings to API
      // await fetch('/api/users/settings', {
      //   method: 'PUT',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(settings)
      // });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      addNotification('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng', 'success');
    } catch (error) {
      console.error('Error saving settings:', error);
      addNotification('Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t', 'error');
    } finally {
      setSaving(false);
    }
  };

  const resetToDefaults = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh?')) {
      setSettings({
        language: 'vi',
        theme: 'light',
        timezone: 'Asia/Ho_Chi_Minh',
        emailNotifications: true,
        downloadNotifications: true,
        promotionalEmails: false,
        securityAlerts: true,
        defaultQuality: 'best',
        downloadLocation: 'downloads',
        autoDownload: false,
        maxConcurrentDownloads: 3,
        profileVisibility: 'private',
        downloadHistory: true,
        analytics: true,
        twoFactorAuth: false,
        sessionTimeout: 30,
        autoLogout: false
      });
      addNotification('ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh', 'info');
    }
  };

  const tabs = [
    { id: 'general', name: 'Chung', icon: '‚öôÔ∏è' },
    { id: 'notifications', name: 'Th√¥ng b√°o', icon: 'üîî' },
    { id: 'downloads', name: 'T·∫£i xu·ªëng', icon: 'üì•' },
    { id: 'privacy', name: 'Ri√™ng t∆∞', icon: 'üîí' },
    { id: 'security', name: 'B·∫£o m·∫≠t', icon: 'üõ°Ô∏è' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <div className="px-4 py-6 sm:px-0">
        {/* Header */}
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">C√†i ƒë·∫∑t</h1>
          <p className="mt-2 text-gray-600">
            Qu·∫£n l√Ω t√πy ch·ªçn v√† c√†i ƒë·∫∑t t√†i kho·∫£n c·ªßa b·∫°n
          </p>
        </header>

        <div className="lg:grid lg:grid-cols-12 lg:gap-x-8">
          {/* Sidebar Navigation */}
          <aside className="py-6 px-2 sm:px-6 lg:py-0 lg:px-0 lg:col-span-3">
            <nav className="space-y-1">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`group rounded-md px-3 py-2 flex items-center text-sm font-medium w-full text-left transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                      : 'text-gray-900 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                  aria-current={activeTab === tab.id ? 'page' : undefined}
                >
                  <span className="mr-3 text-lg">{tab.icon}</span>
                  {tab.name}
                </button>
              ))}
            </nav>
          </aside>

          {/* Main Content */}
          <div className="space-y-6 sm:px-6 lg:px-0 lg:col-span-9">
            <div className="bg-white shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                {/* General Settings */}
                {activeTab === 'general' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t chung</h3>
                      
                      {/* Language */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ng√¥n ng·ªØ
                        </label>
                        <select
                          value={settings.language}
                          onChange={(e) => handleSettingChange('general', 'language', e.target.value)}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value="vi">Ti·∫øng Vi·ªát</option>
                          <option value="en">English</option>
                        </select>
                      </div>

                      {/* Theme */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Giao di·ªán
                        </label>
                        <div className="mt-2 space-y-2">
                          {[
                            { value: 'light', label: '‚òÄÔ∏è S√°ng' },
                            { value: 'dark', label: 'üåô T·ªëi' },
                            { value: 'auto', label: 'üîÑ T·ª± ƒë·ªông' }
                          ].map((option) => (
                            <label key={option.value} className="flex items-center">
                              <input
                                type="radio"
                                name="theme"
                                value={option.value}
                                checked={settings.theme === option.value}
                                onChange={(e) => handleSettingChange('general', 'theme', e.target.value)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
                              />
                              <span className="ml-3 text-sm text-gray-700">{option.label}</span>
                            </label>
                          ))}
                        </div>
                      </div>

                      {/* Timezone */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          M√∫i gi·ªù
                        </label>
                        <select
                          value={settings.timezone}
                          onChange={(e) => handleSettingChange('general', 'timezone', e.target.value)}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value="Asia/Ho_Chi_Minh">Vi·ªát Nam (UTC+7)</option>
                          <option value="UTC">UTC (UTC+0)</option>
                          <option value="America/New_York">New York (UTC-5)</option>
                        </select>
                      </div>
                    </div>
                  </div>
                )}

                {/* Notification Settings */}
                {activeTab === 'notifications' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t th√¥ng b√°o</h3>
                      
                      <div className="space-y-4">
                        {[
                          { key: 'emailNotifications', label: 'Th√¥ng b√°o qua email', desc: 'Nh·∫≠n th√¥ng b√°o quan tr·ªçng qua email' },
                          { key: 'downloadNotifications', label: 'Th√¥ng b√°o t·∫£i xu·ªëng', desc: 'Th√¥ng b√°o khi t·∫£i xu·ªëng ho√†n t·∫•t' },
                          { key: 'promotionalEmails', label: 'Email khuy·∫øn m√£i', desc: 'Nh·∫≠n th√¥ng tin v·ªÅ ∆∞u ƒë√£i v√† t√≠nh nƒÉng m·ªõi' },
                          { key: 'securityAlerts', label: 'C·∫£nh b√°o b·∫£o m·∫≠t', desc: 'Th√¥ng b√°o v·ªÅ ho·∫°t ƒë·ªông ƒëƒÉng nh·∫≠p v√† b·∫£o m·∫≠t' }
                        ].map((item) => (
                          <div key={item.key} className="flex items-start">
                            <div className="flex items-center h-5">
                              <input
                                type="checkbox"
                                checked={settings[item.key]}
                                onChange={(e) => handleSettingChange('notifications', item.key, e.target.checked)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                              />
                            </div>
                            <div className="ml-3 text-sm">
                              <label className="font-medium text-gray-700">{item.label}</label>
                              <p className="text-gray-500">{item.desc}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Download Settings */}
                {activeTab === 'downloads' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t t·∫£i xu·ªëng</h3>
                      
                      {/* Default Quality */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ch·∫•t l∆∞·ª£ng m·∫∑c ƒë·ªãnh
                        </label>
                        <select
                          value={settings.defaultQuality}
                          onChange={(e) => handleSettingChange('downloads', 'defaultQuality', e.target.value)}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value="best">T·ªët nh·∫•t c√≥ s·∫µn</option>
                          <option value="1080p">1080p (Full HD)</option>
                          <option value="720p">720p (HD)</option>
                          <option value="480p">480p (SD)</option>
                        </select>
                      </div>

                      {/* Max Concurrent Downloads */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          S·ªë l∆∞·ª£ng t·∫£i ƒë·ªìng th·ªùi t·ªëi ƒëa
                        </label>
                        <input
                          type="number"
                          min="1"
                          max="10"
                          value={settings.maxConcurrentDownloads}
                          onChange={(e) => handleSettingChange('downloads', 'maxConcurrentDownloads', parseInt(e.target.value))}
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                      </div>

                      {/* Auto Download */}
                      <div className="flex items-start">
                        <div className="flex items-center h-5">
                          <input
                            type="checkbox"
                            checked={settings.autoDownload}
                            onChange={(e) => handleSettingChange('downloads', 'autoDownload', e.target.checked)}
                            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                          />
                        </div>
                        <div className="ml-3 text-sm">
                          <label className="font-medium text-gray-700">T·ª± ƒë·ªông t·∫£i xu·ªëng</label>
                          <p className="text-gray-500">T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu t·∫£i sau khi ph√¢n t√≠ch video</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Privacy Settings */}
                {activeTab === 'privacy' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t ri√™ng t∆∞</h3>
                      
                      <div className="space-y-4">
                        {[
                          { key: 'downloadHistory', label: 'L∆∞u l·ªãch s·ª≠ t·∫£i xu·ªëng', desc: 'L∆∞u tr·ªØ l·ªãch s·ª≠ c√°c video ƒë√£ t·∫£i' },
                          { key: 'analytics', label: 'Chia s·∫ª d·ªØ li·ªáu ph√¢n t√≠ch', desc: 'Gi√∫p c·∫£i thi·ªán d·ªãch v·ª• b·∫±ng c√°ch chia s·∫ª d·ªØ li·ªáu s·ª≠ d·ª•ng ·∫©n danh' }
                        ].map((item) => (
                          <div key={item.key} className="flex items-start">
                            <div className="flex items-center h-5">
                              <input
                                type="checkbox"
                                checked={settings[item.key]}
                                onChange={(e) => handleSettingChange('privacy', item.key, e.target.checked)}
                                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                              />
                            </div>
                            <div className="ml-3 text-sm">
                              <label className="font-medium text-gray-700">{item.label}</label>
                              <p className="text-gray-500">{item.desc}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Security Settings */}
                {activeTab === 'security' && (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">C√†i ƒë·∫∑t b·∫£o m·∫≠t</h3>
                      
                      {/* Two Factor Auth */}
                      <div className="mb-6">
                        <div className="flex items-start">
                          <div className="flex items-center h-5">
                            <input
                              type="checkbox"
                              checked={settings.twoFactorAuth}
                              onChange={(e) => handleSettingChange('security', 'twoFactorAuth', e.target.checked)}
                              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                            />
                          </div>
                          <div className="ml-3 text-sm">
                            <label className="font-medium text-gray-700">X√°c th·ª±c hai y·∫øu t·ªë</label>
                            <p className="text-gray-500">Th√™m l·ªõp b·∫£o m·∫≠t b·ªï sung cho t√†i kho·∫£n c·ªßa b·∫°n</p>
                          </div>
                        </div>
                      </div>

                      {/* Session Timeout */}
                      <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Th·ªùi gian h·∫øt h·∫°n phi√™n (ph√∫t)
                        </label>
                        <select
                          value={settings.sessionTimeout}
                          onChange={(e) => handleSettingChange('security', 'sessionTimeout', parseInt(e.target.value))}
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                        >
                          <option value={15}>15 ph√∫t</option>
                          <option value={30}>30 ph√∫t</option>
                          <option value={60}>1 gi·ªù</option>
                          <option value={120}>2 gi·ªù</option>
                          <option value={0}>Kh√¥ng gi·ªõi h·∫°n</option>
                        </select>
                      </div>

                      {/* Auto Logout */}
                      <div className="flex items-start">
                        <div className="flex items-center h-5">
                          <input
                            type="checkbox"
                            checked={settings.autoLogout}
                            onChange={(e) => handleSettingChange('security', 'autoLogout', e.target.checked)}
                            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                          />
                        </div>
                        <div className="ml-3 text-sm">
                          <label className="font-medium text-gray-700">T·ª± ƒë·ªông ƒëƒÉng xu·∫•t</label>
                          <p className="text-gray-500">T·ª± ƒë·ªông ƒëƒÉng xu·∫•t khi kh√¥ng ho·∫°t ƒë·ªông</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="pt-6 border-t border-gray-200">
                  <div className="flex justify-between">
                    <button
                      onClick={resetToDefaults}
                      className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-200 transition-colors"
                    >
                      Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
                    </button>
                    
                    <button
                      onClick={saveSettings}
                      disabled={saving}
                      className="bg-blue-600 text-white px-6 py-2 rounded-md text-sm font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
                    >
                      {saving && <LoadingSpinner size="sm" className="mr-2" />}
                      {saving ? 'ƒêang l∆∞u...' : 'L∆∞u c√†i ƒë·∫∑t'}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
};

export default SettingsPage;
