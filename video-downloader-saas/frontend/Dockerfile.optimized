# =============================================================================
# OPTIMIZED MULTI-STAGE DOCKERFILE FOR REACT FRONTEND
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 1: Dependencies Installation
# -----------------------------------------------------------------------------
FROM node:18-alpine AS dependencies

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with security audit
RUN npm ci --audit && \
    npm cache clean --force

# -----------------------------------------------------------------------------
# Stage 2: Build Stage
# -----------------------------------------------------------------------------
FROM node:18-alpine AS build

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY package*.json ./

# Copy source code
COPY . .

# Set build environment variables
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV ESLINT_NO_DEV_ERRORS=true
ENV DISABLE_ESLINT_PLUGIN=true
ENV CI=false
ENV GENERATE_SOURCEMAP=false
ENV HOST=0.0.0.0
ENV WDS_SOCKET_HOST=0.0.0.0
ENV WDS_SOCKET_PORT=0
ENV DANGEROUSLY_DISABLE_HOST_CHECK=true
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Build the application
RUN npm run build

# Remove source maps and unnecessary files for security
RUN find build -name "*.map" -delete && \
    find build -name "*.txt" -delete || true

# -----------------------------------------------------------------------------
# Stage 3: Nginx Configuration
# -----------------------------------------------------------------------------
FROM nginx:1.25-alpine AS nginx-config

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Create nginx user for security
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001

# Copy optimized nginx configuration
COPY --chown=nginx-app:nginx-app nginx/nginx-optimized.conf /etc/nginx/nginx.conf

# -----------------------------------------------------------------------------
# Stage 4: Production Image
# -----------------------------------------------------------------------------
FROM nginx-config AS production

# Copy built application from build stage
COPY --from=build --chown=nginx-app:nginx-app /app/build /usr/share/nginx/html

# Create health check file
RUN echo "OK" > /usr/share/nginx/html/health.txt && \
    chown nginx-app:nginx-app /usr/share/nginx/html/health.txt

# Copy optimized site configuration
COPY --chown=nginx-app:nginx-app nginx/site-optimized.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html && \
    chown -R nginx-app:nginx-app /etc/nginx/conf.d && \
    chmod -R 644 /usr/share/nginx/html && \
    chmod -R 644 /etc/nginx/conf.d

# Create directories for nginx
RUN mkdir -p /var/cache/nginx /var/log/nginx && \
    chown -R nginx-app:nginx-app /var/cache/nginx /var/log/nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/health.txt || exit 1

# Expose port
EXPOSE 80

# Switch to non-root user
USER nginx-app

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# BUILD INSTRUCTIONS:
# docker build -f Dockerfile.optimized --build-arg REACT_APP_API_URL=http://localhost:5000 -t video-downloader-frontend:optimized .
# 
# SECURITY FEATURES:
# - Non-root user execution
# - Security headers (CSP, HSTS, etc.)
# - Rate limiting
# - Access control for sensitive files
# - Minimal attack surface
# 
# PERFORMANCE FEATURES:
# - Multi-stage build for smaller image
# - Gzip compression
# - Static file caching
# - Optimized nginx configuration
# - Connection pooling
# =============================================================================