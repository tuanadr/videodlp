version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - USE_SQLITE=false
      - DB_NAME=videodlp
      - DB_USER=videodlp_user
      - DB_PASSWORD=videodlp_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_SSL=false
      - JWT_SECRET=your-jwt-secret-key-here
      - CORS_ORIGIN=http://localhost:3000
      - FRONTEND_URL=http://localhost:3000
      - SYNC_DATABASE=true
    volumes:
      - ./backend/downloads:/app/downloads
      - ./backend/logs:/app/logs
      - ./backend/database:/app/database
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5000
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.txt"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=videodlp
      - POSTGRES_USER=videodlp_user
      - POSTGRES_PASSWORD=videodlp_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videodlp_user -d videodlp"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  backend-downloads:
  backend-logs:
  backend-database:
  postgres_data:
